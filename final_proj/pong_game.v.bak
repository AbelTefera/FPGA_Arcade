module pong_game(clk, rst, x, y, p1_bar, p2_bar, ball, left1, right1, left2, right2, start, done);

input clk;
input rst;
input right1, left1, right2, left2, start;
input [9:0] x;
input [8:0] y;
output reg done;
output [4:0] ball;
output p1_bar, p2_bar;

reg [2:0] s;
reg [2:0] ns;

parameter start_game = 2'd0,
				playing = 2'd1,
				game_done = 2'd2;

always@(posedge clk or negedge rst)
begin
		if (rst == 1'b0)
		begin
			s <= start_game;
		end
		else
		begin
			s <= ns;
		end
end

// state transition
always@(*)
begin
	case(s)
		start_game: begin
			done = 1'b0;
			if (start == 1'b1)
			begin	
				ns = playing;
			end
			else 
			begin
				ns = start;
			end
		end
		
		playing: begin
			
		end
		
		game_done: begin
			done = 1'b1;
		end
	endcase
	
	// player_bar
	bar_height = 25;
	bar_width = 96;
	p1_bar_y = 450;
	p2_bar_y = 0;
	bar_x_sp = 4;
	
	// ball
	ball_x_sp = 1;
	ball_y_sp = 1;
end
			
reg [9:0] p1_bar_x;
reg [8:0] p1_bar_y;

reg [9:0] p2_bar_x;
reg [8:0] p2_bar_y;

reg [9:0] bar_width;
reg [8:0] bar_height;

reg [7:0] bar_x_sp;

reg [9:0] ball_x;
reg [8:0] ball_y;

reg ball_x_dir;
reg ball_y_dir;

reg [7:0] ball_x_sp;
reg [7:0] ball_y_sp;

reg [19:0] count;

always@(posedge clk)
begin
	if (count == 20'd500_000)
	begin
		count <= 20'd0;
	end
	else
	begin
		count <= count + 20'd1;
	end
end
	
always@(posedge clk)
begin
	case(s)
		start_game: begin
			p1_bar_x <= 272;
			
			ball_x <= 300;
			ball_y <= 200;
			
			ball_y_dir <= 1'b1;
			ball_x_dir <= 1'b1;
		end
		
		playing: begin
			if (count == 20'd500_000)
			begin
				// p1 bar movement
				if (right1 == 1'b0)
				begin
					p1_bar_x <= p1_bar_x + bar_x_sp;
				end
				
				if (left1 == 1'b0)
				begin
					p1_bar_x <= p1_bar_x - bar_x_sp;
				end
				
				// p2 bar movement
				if (right2 == 1'b0)
				begin
					p2_bar_x <= p2_bar_x + bar_x_sp;
				end
				
				if (left2 == 1'b0)
				begin
					p2_bar_x <= p2_bar_x - bar_x_sp;
				end
				
				// ball movement
				if (ball_x_dir == 1'b1)
				begin
					ball_x <= ball_x + ball_x_sp;
				end
				else 
				begin
					ball_x <= ball_x - ball_x_sp;
				end
				
				if (ball_y_dir == 1'b1) 
				begin
					ball_y <= ball_y + ball_y_sp;
				end
				else
				begin
					ball_y <= ball_y - ball_y_sp;
				end
				
				// ball bounces of p1 bar 
				if ((ball_x >= p1_bar_x) && (ball_x <= (p1_bar_x + bar_width)) && (ball_y >= (p1_bar_y - 10)) && (ball_y <= (p1_bar_y + bar_height - 10)))
				begin
					ball_y_dir <= 1'b0;
				end
				
				// ball bounces of p2 bar 
				if ((ball_x >= p2_bar_x) && (ball_x <= (p2_bar_x + bar_width)) && (ball_y >= (p2_bar_y + 10)) && (ball_y <= (p2_bar_y + bar_height + 10)))
				begin
					ball_y_dir <= 1'b1;
				end
				
				// ball direction
				if (((ball_x + 10) >= 639) && ((ball_x + 10) <= 640))
				begin
					ball_x_dir <= 1'b0;
				end
				else if (ball_x >= 0 && ball_x <= 1)
				begin
					ball_x_dir <= 1'b1;
				end
				
				if (((ball_y + 10) >= 478) && ((ball_y + 10) <= 480))
				begin
					ball_y_dir <= 1'b0;
				end
				else if (ball_y >= 0 && ball_y <= 2)
				begin
					ball_y_dir <= 1'b1;
				end
			end
		end
	endcase
end

assign p1_bar = ((x > p1_bar_x) & (x < p1_bar_x + bar_width) & (y > p1_bar_y) & (y < (p1_bar_y + bar_height))) ? 1 : 0;
assign p2_bar = ((x > p2_bar_x) & (x < p2_bar_x + bar_width) & (y > p2_bar_y) & (y < (p2_bar_y + bar_height))) ? 1 : 0;

assign ball[0] = ((x > ball_x + 3) & (x < (ball_x + 10 - 3)) & (y > (ball_y + 0)) & (y < (ball_y + 2))) ? 1 : 0;
assign ball[1] = ((x > ball_x + 2) & (x < (ball_x + 10 - 2)) & (y > (ball_y + 2)) & (y < (ball_y + 4))) ? 1 : 0;
assign ball[2] = ((x > ball_x) & (x < (ball_x + 10)) & (y > (ball_y + 4)) & (y < (ball_y + 6))) ? 1 : 0;
assign ball[3] = ((x > ball_x + 2) & (x < (ball_x + 10 - 2)) & (y > (ball_y + 6)) & (y < (ball_y + 8))) ? 1 : 0;
assign ball[4] = ((x > ball_x + 3) & (x < (ball_x + 10 - 3)) & (y > (ball_y + 8)) & (y < (ball_y + 10))) ? 1 : 0;

endmodule
